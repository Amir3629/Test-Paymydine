openapi: 3.0.3
info:
  title: PayMyDine Restaurant API
  description: |
    Multi-tenant restaurant ordering and management system API.
    
    **Security Warning**: This API currently has no authentication implemented.
    All endpoints are publicly accessible.
    
    **Multi-tenant**: Each restaurant has isolated data through subdomain-based routing.
  version: 1.0.0
  contact:
    name: PayMyDine Support
    email: support@paymydine.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8000/api/v1
    description: Development server
  - url: https://{tenant}.paymydine.com/api/v1
    description: Production server (tenant-specific)

security:
  - {} # No authentication currently implemented

paths:
  /health:
    get:
      summary: Health check endpoint
      description: Returns API health status
      operationId: getHealth
      tags:
        - System
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  timestamp:
                    type: string
                    format: date-time
                  version:
                    type: string
                    example: 1.0.0

  /menu:
    get:
      summary: Get menu items
      description: Retrieve all available menu items with categories
      operationId: getMenu
      tags:
        - Menu
      responses:
        '200':
          description: Menu items retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/MenuItem'
                      categories:
                        type: array
                        items:
                          $ref: '#/components/schemas/Category'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /menu/categories:
    get:
      summary: Get menu categories
      description: Retrieve all menu categories
      operationId: getMenuCategories
      tags:
        - Menu
      responses:
        '200':
          description: Categories retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Category'

  /menu/items:
    get:
      summary: Get menu items
      description: Retrieve all menu items
      operationId: getMenuItems
      tags:
        - Menu
      responses:
        '200':
          description: Menu items retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/MenuItem'

  /menu/categories/{categoryId}/items:
    get:
      summary: Get menu items by category
      description: Retrieve menu items for a specific category
      operationId: getMenuItemsByCategory
      tags:
        - Menu
      parameters:
        - name: categoryId
          in: path
          required: true
          description: Category ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Menu items retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/MenuItem'

  /categories:
    get:
      summary: Get categories
      description: Retrieve all categories
      operationId: getCategories
      tags:
        - Categories
      responses:
        '200':
          description: Categories retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Category'

  /categories/{categoryId}:
    get:
      summary: Get category details
      description: Retrieve details for a specific category
      operationId: getCategory
      tags:
        - Categories
      parameters:
        - name: categoryId
          in: path
          required: true
          description: Category ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Category retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Category'

  /orders:
    post:
      summary: Create order
      description: Create a new order
      operationId: createOrder
      tags:
        - Orders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderRequest'
      responses:
        '200':
          description: Order created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  order_id:
                    type: integer
                    example: 123
                  message:
                    type: string
                    example: Order placed successfully
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      summary: List orders
      description: Retrieve list of orders
      operationId: listOrders
      tags:
        - Orders
      responses:
        '200':
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'

  /orders/{orderId}:
    get:
      summary: Get order details
      description: Retrieve details for a specific order
      operationId: getOrder
      tags:
        - Orders
      parameters:
        - name: orderId
          in: path
          required: true
          description: Order ID
          schema:
            type: integer
            example: 123
      responses:
        '200':
          description: Order retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    patch:
      summary: Update order
      description: Update an existing order
      operationId: updateOrder
      tags:
        - Orders
      parameters:
        - name: orderId
          in: path
          required: true
          description: Order ID
          schema:
            type: integer
            example: 123
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderUpdateRequest'
      responses:
        '200':
          description: Order updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Order updated successfully

  /order-status:
    get:
      summary: Get order status
      description: Retrieve status for a specific order
      operationId: getOrderStatus
      tags:
        - Orders
      parameters:
        - name: order_id
          in: query
          required: true
          description: Order ID
          schema:
            type: integer
            example: 123
      responses:
        '200':
          description: Order status retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/OrderStatus'

    post:
      summary: Update order status
      description: Update status for a specific order
      operationId: updateOrderStatus
      tags:
        - Orders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                order_id:
                  type: integer
                  example: 123
                status:
                  type: string
                  enum: [pending, confirmed, preparing, ready, delivered, cancelled]
                  example: preparing
      responses:
        '200':
          description: Order status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Order status updated successfully

  /tables:
    get:
      summary: List tables
      description: Retrieve list of all tables
      operationId: listTables
      tags:
        - Tables
      responses:
        '200':
          description: Tables retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Table'

  /tables/{qrCode}:
    get:
      summary: Get table by QR code
      description: Retrieve table information using QR code
      operationId: getTableByQrCode
      tags:
        - Tables
      parameters:
        - name: qrCode
          in: path
          required: true
          description: QR code
          schema:
            type: string
            example: ms10zQpxP
      responses:
        '200':
          description: Table retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Table'
        '404':
          description: Table not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /table-info:
    get:
      summary: Get table information
      description: Retrieve table information by table ID
      operationId: getTableInfo
      tags:
        - Tables
      parameters:
        - name: table_id
          in: query
          required: true
          description: Table ID
          schema:
            type: string
            example: "7"
      responses:
        '200':
          description: Table information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Table'

  /table-menu:
    get:
      summary: Get table menu
      description: Retrieve menu for a specific table
      operationId: getTableMenu
      tags:
        - Tables
      parameters:
        - name: table_id
          in: query
          required: true
          description: Table ID
          schema:
            type: string
            example: "7"
        - name: location_id
          in: query
          required: false
          description: Location ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Table menu retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/MenuItem'
                      categories:
                        type: array
                        items:
                          $ref: '#/components/schemas/Category'

  /restaurant:
    get:
      summary: Get restaurant information
      description: Retrieve restaurant details and settings
      operationId: getRestaurantInfo
      tags:
        - Restaurant
      responses:
        '200':
          description: Restaurant information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Restaurant'

  /waiter-call:
    post:
      summary: Call waiter
      description: Send a waiter call request
      operationId: callWaiter
      tags:
        - Restaurant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                table_id:
                  type: string
                  example: "7"
                message:
                  type: string
                  maxLength: 500
                  example: "Need assistance with the menu"
      responses:
        '200':
          description: Waiter call sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Waiter called successfully
                  call_id:
                    type: string
                    example: "64f8a1b2c3d4e5f6"

  /api/v1/valet-request:
    post:
      summary: Submit valet request
      description: Submit a valet parking request for a table
      operationId: submitValetRequest
      tags:
        - Notifications
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - table_id
                - customer_name
                - car_make
                - license_plate
              properties:
                table_id:
                  type: string
                  example: "7"
                customer_name:
                  type: string
                  maxLength: 255
                  example: "John Smith"
                car_make:
                  type: string
                  maxLength: 255
                  example: "Toyota Camry"
                license_plate:
                  type: string
                  maxLength: 20
                  example: "ABC123"
      responses:
        '200':
          description: Valet request submitted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Valet request submitted successfully"
                  request_id:
                    type: integer
                    example: 123
                  notification_id:
                    type: integer
                    example: 456
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Table not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/table-notes:
    post:
      summary: Submit table note
      description: Submit a note for a specific table
      operationId: submitTableNote
      tags:
        - Notifications
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - table_id
                - note
                - timestamp
              properties:
                table_id:
                  type: string
                  example: "7"
                note:
                  type: string
                  maxLength: 500
                  example: "Please bring extra napkins"
                timestamp:
                  type: string
                  format: date-time
                  example: "2024-01-15T14:30:00Z"
      responses:
        '200':
          description: Note submitted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Note submitted successfully"
                  note_id:
                    type: integer
                    example: 123
                  notification_id:
                    type: integer
                    example: 456
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Table not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/api/notifications:
    get:
      summary: Get notifications
      description: Get notifications for admin panel
      operationId: getNotifications
      tags:
        - Notifications
      parameters:
        - name: status
          in: query
          description: Filter by notification status
          required: false
          schema:
            type: string
            enum: [new, seen, in_progress, resolved, all]
            default: new
        - name: type
          in: query
          description: Filter by notification type
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of notifications per page
          required: false
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Notifications retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      notifications:
                        type: array
                        items:
                          $ref: '#/components/schemas/Notification'
                      pagination:
                        $ref: '#/components/schemas/Pagination'
                      counts:
                        $ref: '#/components/schemas/NotificationCounts'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/api/notifications/count:
    get:
      summary: Get notification count
      description: Get notification counts for badge
      operationId: getNotificationCount
      tags:
        - Notifications
      responses:
        '200':
          description: Notification counts retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/NotificationCounts'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/api/notifications/{id}:
    patch:
      summary: Update notification status
      description: Update notification status (seen, in_progress, resolved)
      operationId: updateNotificationStatus
      tags:
        - Notifications
      parameters:
        - name: id
          in: path
          description: Notification ID
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [seen, in_progress, resolved]
                  example: "seen"
                acted_by:
                  type: integer
                  example: 1
      responses:
        '200':
          description: Notification status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      notification_id:
                        type: integer
                        example: 123
                      status:
                        type: string
                        example: "seen"
                      seen_at:
                        type: string
                        format: date-time
                      acted_by:
                        type: integer
                        example: 1
                      acted_at:
                        type: string
                        format: date-time
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/api/notifications/mark-all-seen:
    patch:
      summary: Mark all notifications as seen
      description: Mark all new notifications as seen
      operationId: markAllNotificationsSeen
      tags:
        - Notifications
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                acted_by:
                  type: integer
                  example: 1
      responses:
        '200':
          description: All notifications marked as seen
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      updated_count:
                        type: integer
                        example: 5
                      acted_by:
                        type: integer
                        example: 1
                      acted_at:
                        type: string
                        format: date-time
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    MenuItem:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Margherita Pizza"
        description:
          type: string
          example: "Classic pizza with tomato and mozzarella"
        price:
          type: number
          format: float
          example: 15.99
        image:
          type: string
          example: "/images/pizza.jpg"
        category_id:
          type: integer
          example: 1
        category_name:
          type: string
          example: "Pizza"
        calories:
          type: integer
          example: 300
        allergens:
          type: array
          items:
            type: string
          example: ["gluten", "dairy"]
        stock_qty:
          type: integer
          example: 10
        minimum_qty:
          type: integer
          example: 1
        available:
          type: boolean
          example: true

    Category:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Pizza"
        description:
          type: string
          example: "Italian pizzas"
        image:
          type: string
          example: "/images/pizza-category.jpg"

    OrderRequest:
      type: object
      required:
        - customer_name
        - items
        - total_amount
        - payment_method
      properties:
        customer_name:
          type: string
          maxLength: 255
          example: "John Doe"
        customer_email:
          type: string
          format: email
          example: "john@example.com"
        customer_phone:
          type: string
          maxLength: 20
          example: "+1234567890"
        items:
          type: array
          minItems: 1
          items:
            type: object
            required:
              - menu_id
              - name
              - quantity
              - price
            properties:
              menu_id:
                type: integer
                example: 1
              name:
                type: string
                example: "Margherita Pizza"
              quantity:
                type: integer
                minimum: 1
                example: 2
              price:
                type: number
                format: float
                example: 15.99
              special_instructions:
                type: string
                maxLength: 500
                example: "Extra cheese"
        total_amount:
          type: number
          format: float
          example: 31.98
        tip_amount:
          type: number
          format: float
          example: 5.00
        payment_method:
          type: string
          enum: [cash, card, paypal, apple_pay, google_pay]
          example: "card"
        special_instructions:
          type: string
          maxLength: 500
          example: "Please deliver to table 7"
        table_id:
          type: string
          example: "7"
        table_name:
          type: string
          example: "Table 7"

    OrderUpdateRequest:
      type: object
      properties:
        status:
          type: string
          enum: [pending, confirmed, preparing, ready, delivered, cancelled]
          example: "preparing"
        assignee_id:
          type: integer
          example: 1
        comment:
          type: string
          example: "Order is being prepared"

    Order:
      type: object
      properties:
        order_id:
          type: integer
          example: 123
        customer_id:
          type: integer
          example: 1
        first_name:
          type: string
          example: "John"
        last_name:
          type: string
          example: "Doe"
        email:
          type: string
          format: email
          example: "john@example.com"
        telephone:
          type: string
          example: "+1234567890"
        location_id:
          type: integer
          example: 1
        order_type:
          type: string
          example: "Table 7"
        order_total:
          type: number
          format: float
          example: 31.98
        status_id:
          type: integer
          example: 1
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    OrderStatus:
      type: object
      properties:
        order_id:
          type: integer
          example: 123
        status_id:
          type: integer
          example: 1
        status_name:
          type: string
          example: "preparing"
        customer_status:
          type: integer
          example: 1
        updated_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    Table:
      type: object
      properties:
        table_id:
          type: integer
          example: 7
        table_name:
          type: string
          example: "Table 7"
        min_capacity:
          type: integer
          example: 2
        max_capacity:
          type: integer
          example: 4
        table_status:
          type: integer
          example: 1
        qr_code:
          type: string
          example: "ms10zQpxP"
        location_id:
          type: integer
          example: 1

    Restaurant:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "PayMyDine Restaurant"
        address:
          type: string
          example: "123 Main St, City, State"
        city:
          type: string
          example: "New York"
        state:
          type: string
          example: "NY"
        telephone:
          type: string
          example: "+1234567890"
        description:
          type: string
          example: "Fine dining restaurant"
        logo:
          type: string
          example: "/images/logo.png"

    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          example: "Order not found"
        message:
          type: string
          example: "The requested order does not exist"

    ValidationError:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          example: "Validation failed"
        message:
          type: string
          example: "The customer name field is required"
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          example:
            customer_name: ["The customer name field is required"]
            items: ["The items field is required"]

    Notification:
      type: object
      properties:
        notification_id:
          type: integer
          example: 123
        type:
          type: string
          example: "waiter_call"
        title:
          type: string
          example: "Waiter Call - Table 7"
        message:
          type: string
          example: "Customer needs assistance with the menu"
        table_id:
          type: integer
          example: 7
        table_name:
          type: string
          example: "Table 7"
        status:
          type: string
          enum: [new, seen, in_progress, resolved]
          example: "new"
        priority:
          type: string
          enum: [low, medium, high, urgent]
          example: "medium"
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T14:30:00Z"
        seen_at:
          type: string
          format: date-time
          nullable: true
        acted_by:
          type: integer
          nullable: true
          example: 1
        acted_at:
          type: string
          format: date-time
          nullable: true
        payload:
          type: object
          additionalProperties: true
          example:
            customer_message: "Need assistance with the menu"
            urgency: "medium"

    NotificationCounts:
      type: object
      properties:
        new:
          type: integer
          example: 5
        seen:
          type: integer
          example: 12
        in_progress:
          type: integer
          example: 3
        resolved:
          type: integer
          example: 8
        total:
          type: integer
          example: 28

    Pagination:
      type: object
      properties:
        current_page:
          type: integer
          example: 1
        per_page:
          type: integer
          example: 20
        total:
          type: integer
          example: 100
        last_page:
          type: integer
          example: 5
        has_more:
          type: boolean
          example: true

tags:
  - name: System
    description: System health and status endpoints
  - name: Menu
    description: Menu items and categories
  - name: Categories
    description: Menu categories
  - name: Orders
    description: Order management
  - name: Tables
    description: Table management and QR codes
  - name: Restaurant
    description: Restaurant information and services
  - name: Notifications
    description: Customer service notifications and requests