import { apiClient, type MenuItem as ApiMenuItem, type Category as ApiCategory, type MenuOption, type MenuOptionValue } from './api-client'

// FIXED: Use dynamic category type instead of hardcoded union
export type MenuItem = {
  id: number
  name: string
  nameKey?: string
  description: string
  descriptionKey?: string
  price: number
  image: string
  category: string // FIXED: Changed from hardcoded union to dynamic string
  category_id?: number
  category_name?: string
  calories?: number
  allergens?: string[]
  stock_qty?: number
  minimum_qty?: number
  available?: boolean
  options?: MenuOption[]
}

export type { MenuOption, MenuOptionValue }

// FIXED: Convert API MenuItem to frontend MenuItem
const convertApiMenuItem = (apiItem: ApiMenuItem, categoryName?: string): MenuItem => {
  // Add mock options for demonstration
  const mockOptions: MenuOption[] = [
    {
      id: 1,
      name: "Size",
      display_type: "radio",
      required: true,
      values: [
        { id: 1, value: "Small", price: 0 },
        { id: 2, value: "Medium", price: 2.00 },
        { id: 3, value: "Large", price: 4.00 }
      ]
    },
    {
      id: 2,
      name: "Sauce",
      display_type: "checkbox",
      required: false,
      values: [
        { id: 4, value: "Extra Sauce", price: 1.50 },
        { id: 5, value: "No Sauce", price: 0 },
        { id: 6, value: "Spicy Sauce", price: 1.00 }
      ]
    }
  ]

  return {
    id: apiItem.id,
    name: apiItem.name,
    nameKey: undefined,
    description: apiItem.description || '',
    descriptionKey: undefined,
    price: apiItem.price,
    image: apiItem.image || '/placeholder.svg?width=200&height=200',
    category: categoryName || apiItem.category_name || 'Main Course',
    category_id: apiItem.category_id,
    category_name: apiItem.category_name,
    calories: apiItem.calories || Math.floor(Math.random() * 600) + 300,
    allergens: apiItem.allergens || [],
    stock_qty: apiItem.stock_qty,
    minimum_qty: apiItem.minimum_qty || 1,
    available: apiItem.available !== false && (apiItem.stock_qty === null || (apiItem.stock_qty ?? 0) > 0),
    options: apiItem.options || mockOptions
  }
}

// FIXED: Update getMenuData to return categoryNames from API
export async function getMenuData(): Promise<{ categories: MenuItem[][], menuItems: MenuItem[], categoryNames: string[] }> {
  try {
    const menuResponse = await apiClient.getMenu()
    
    // Convert API items to frontend format
    const menuItems: MenuItem[] = menuResponse.data.items?.map(apiItem => 
      convertApiMenuItem(apiItem, apiItem.category_name)
    ) || []
    
    // FIXED: Get category names directly from API response
    const categoryNames = menuResponse.data.categories?.map((cat: any) => cat.name) || []
    
    // Group items by category
    const categoryGroups: Record<string, MenuItem[]> = {}
    menuItems.forEach(item => {
      const categoryName = item.category
      if (!categoryGroups[categoryName]) {
        categoryGroups[categoryName] = []
      }
      categoryGroups[categoryName].push(item)
    })
    
    const categories = Object.values(categoryGroups)
    
    return { categories, menuItems, categoryNames }
  } catch (error) {
    console.error('Failed to fetch menu data from API, using fallback data:', error)
    // Return static fallback data if API fails
    return { categories: [], menuItems: menuData, categoryNames: [] }
  }
}

export async function getCategories(): Promise<string[]> {
  try {
    const apiResponse = await apiClient.getCategories()
    return apiResponse.data.map(cat => cat.name)
  } catch (error) {
    console.error('Failed to fetch categories from API, using fallback:', error)
    return categories
  }
}

export async function getMenuItems(categoryId?: number): Promise<MenuItem[]> {
  try {
    const apiResponse = await apiClient.getMenuItems(categoryId)
    return apiResponse.data.map(apiItem => convertApiMenuItem(apiItem))
  } catch (error) {
    console.error('Failed to fetch menu items from API, using fallback:', error)
    return menuData.filter(item => !categoryId || item.category_id === categoryId)
  }
}

export async function getRestaurantInfo() {
  try {
    return await apiClient.getRestaurantInfo()
  } catch (error) {
    console.error('Failed to fetch restaurant info:', error)
    return {
      id: 1,
      name: 'PayMyDine',
      domain: 'localhost',
      description: 'A luxurious dining experience',
      address: '123 Main St',
      phone: '+1234567890',
      email: 'info@paymydine.com',
      status: 'active',
      settings: {
        currency: 'USD',
        timezone: 'UTC',
        delivery_enabled: false,
        pickup_enabled: true
      }
    }
  }
}

// FIXED: Add static menu items with options for fallback
export const categories: string[] = ['Appetizer', 'Main Course', 'Desserts', 'Drinks']

export const menuData: MenuItem[] = [
  {
    id: 1,
    name: "ATA RICE",
    description: "Delicious rice with special sauce",
    price: 12.00,
    image: "/images/pasta.png",
    category: "Main Course",
    category_id: 1,
    category_name: "Main Course",
    calories: 450,
    allergens: ["Gluten"],
    stock_qty: 10,
    minimum_qty: 1,
    available: true,
    options: [
      {
        id: 1,
        name: "Size",
        display_type: "radio",
        required: true,
        values: [
          { id: 1, value: "Small", price: 0 },
          { id: 2, value: "Medium", price: 2.00 },
          { id: 3, value: "Large", price: 4.00 }
        ]
      },
      {
        id: 2,
        name: "Sauce",
        display_type: "checkbox",
        required: false,
        values: [
          { id: 4, value: "Extra Sauce", price: 1.50 },
          { id: 5, value: "No Sauce", price: 0 },
          { id: 6, value: "Spicy Sauce", price: 1.00 }
        ]
      }
    ]
  },
  {
    id: 2,
    name: "AMALA",
    description: "Traditional African dish",
    price: 11.99,
    image: "/images/pasta.png",
    category: "Main Course",
    category_id: 1,
    category_name: "Main Course",
    calories: 380,
    allergens: [],
    stock_qty: 15,
    minimum_qty: 1,
    available: true,
    options: [
      {
        id: 3,
        name: "Size",
        display_type: "radio",
        required: true,
        values: [
          { id: 7, value: "Small", price: 0 },
          { id: 8, value: "Medium", price: 1.50 },
          { id: 9, value: "Large", price: 3.00 }
        ]
      },
      {
        id: 4,
        name: "Toppings",
        display_type: "checkbox",
        required: false,
        values: [
          { id: 10, value: "Extra Meat", price: 2.50 },
          { id: 11, value: "Vegetables", price: 1.00 },
          { id: 12, value: "Cheese", price: 1.75 }
        ]
      }
    ]
  },
  {
    id: 3,
    name: "Boiled Plantain",
    description: "Fresh boiled plantain",
    price: 9.99,
    image: "/images/pasta.png",
    category: "Appetizer",
    category_id: 2,
    category_name: "Appetizer",
    calories: 220,
    allergens: [],
    stock_qty: 20,
    minimum_qty: 1,
    available: true,
    options: [
      {
        id: 5,
        name: "Quantity",
        display_type: "radio",
        required: true,
        values: [
          { id: 13, value: "Single", price: 0 },
          { id: 14, value: "Double", price: 4.99 },
          { id: 15, value: "Family Pack", price: 14.99 }
        ]
      },
      {
        id: 6,
        name: "Dips",
        display_type: "checkbox",
        required: false,
        values: [
          { id: 16, value: "Peanut Sauce", price: 0.50 },
          { id: 17, value: "Hot Sauce", price: 0.75 },
          { id: 18, value: "Garlic Dip", price: 0.50 }
        ]
      }
    ]
  },
  {
    id: 4,
    name: "RICE",
    description: "Steamed white rice",
    price: 11.99,
    image: "/images/pasta.png",
    category: "Main Course",
    category_id: 1,
    category_name: "Main Course",
    calories: 300,
    allergens: [],
    stock_qty: 25,
    minimum_qty: 1,
    available: true,
    options: [
      {
        id: 7,
        name: "Size",
        display_type: "radio",
        required: true,
        values: [
          { id: 19, value: "Small", price: 0 },
          { id: 20, value: "Medium", price: 1.99 },
          { id: 21, value: "Large", price: 3.99 }
        ]
      },
      {
        id: 8,
        name: "Additions",
        display_type: "checkbox",
        required: false,
        values: [
          { id: 22, value: "Mixed Vegetables", price: 1.25 },
          { id: 23, value: "Fried Egg", price: 1.00 },
          { id: 24, value: "Extra Rice", price: 2.00 }
        ]
      }
    ]
  }
]

